// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/checker/checker.go

// Package checker_mock is a generated GoMock package.
package checker_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	checker "github.com/pitsanujiw/go-health-check/internal/checker"
)

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHttpClient) Ping(urls []string) checker.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", urls)
	ret0, _ := ret[0].(checker.Result)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHttpClientMockRecorder) Ping(urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHttpClient)(nil).Ping), urls)
}

// PingUrl mocks base method.
func (m *MockHttpClient) PingUrl(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingUrl", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingUrl indicates an expected call of PingUrl.
func (mr *MockHttpClientMockRecorder) PingUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingUrl", reflect.TypeOf((*MockHttpClient)(nil).PingUrl), url)
}
